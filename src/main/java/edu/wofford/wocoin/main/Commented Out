README

This is a scratch text file where we're putting all the code we :"commented out" either for confusion, code failure, or future use

Each section has the code (with comment out /* */) and begins with the java class it came from

There may also be brief descriptions of what the purpose was

------------------------------------------------------------------------------------------------------------------------
Users.java

We originally wanted this to be our file for Adding Users to the database,
we found it redundant due to the Feature01Main code

  /*  public static void AddUser(String username, String password) {
         String url = "jdbc:sqlite:" + filename;
        String[] sqls = {" "};

        try (Connection conn = DriverManager.getConnection(url)) {
            for (String sql : sqls) {
                Statement stmt = conn.createStatement();
                stmt.executeUpdate(sql);
                stmt.close();
                // Wait for one second so that timestamps are different.
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }*/
------------------------------------------------------------------------------------------------------------------------

UsersTest.java

These are our Unit tests. We don't really know how to write Unit Tests so we experimented trying a few


    @Test
    public void UsersTest(){
        //second test is check username + password using Users.java
        Users tester = new Users(); //should we set this to Feature01Main?
        //if we do, how do we test username + password ??
        /*
        assertEquals(tester.SaltPassword("jdoe", "ebd3528832b124bb7886cd8e8d42871c99e06d5f3ad0c6ee883f6219b2b6a955"),
                "username is: \npassword is:");
        assertEquals(tester.SaltPassword("jsmith", "9d3194cf601e62d35f144abebcea7704ad005402e102d134bd8f82ac469c2ec9"),
                "username is: \npassword is:");
        assertEquals(tester.SaltPassword("hjones", "5d94ecaff496ac900a1f68ec950153aa1f500d06227b65167f460e5dd20a959b"),
                "username is: \npassword is:");
        assertEquals(tester.SaltPassword("srogers", "26f2573d733da38fb3cd09eb79f884bbe63010570d394de7d8809b65823da85a"),
                "username is: \npassword is:");
         */
    }


    @Test
    public void UsersTest3(){
        //third test on if user exists / can be created
        Users tester = new Users();

    }


    /*
    @Test
    public void InputTest() {
        String[] Salt_Hash = Users.SaltPassword("test");
        int int_salt = Integer.parseInt(Salt_Hash[0]);
        String hash = Salt_Hash[1];
        try (Connection conn = DriverManager.getConnection(url)) {
            Statement stmt = conn.createStatement();
            String sqls = "INSERT INTO users (id, salt, hash) VALUES (?, ?, ?)";
            PreparedStatement prepStmt = conn.prepareStatement(sqls);
            prepStmt.setString(1, id);
            prepStmt.setInt(2, int_salt);
            System.out.println("" + id + " " + int_salt + " " + hash);
            prepStmt.setString(3, hash);
            prepStmt.executeUpdate();

            prepStmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    */

------------------------------------------------------------------------------------------------------------------------

